/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package amt9.lbrcina.moviemanager;

import hr.algebra.dal.GenericRepository;
import hr.algebra.dal.MovieRepository;
import hr.algebra.dal.RepositoryFactory;
import hr.algebra.dal.UserRepository;
import hr.algebra.factory.UrlConnectionFactory;
import hr.algebra.model.Actor;
import hr.algebra.model.Director;
import hr.algebra.model.Genre;
import hr.algebra.model.Movie;
import hr.algebra.model.table.ActorTableModel;
import hr.algebra.model.table.DirectorTableModel;
import hr.algebra.model.table.GenreTableModel;
import hr.algebra.model.table.MovieTableModel;
import hr.algebra.utilities.IconUtils;
import hr.algebra.utilities.Parser;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import javax.swing.Timer;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Korisnik
 */
public class MovieMaker extends javax.swing.JFrame {
    
    private boolean isAdmin;

    private UserRepository userRepository;
    
    private GenericRepository<Actor> actorRepository;
    private GenericRepository<Director> directorRepository;
    private GenericRepository<Genre> genreRepository;
    private MovieRepository movieRepository;
    
    private ActorTableModel actorTableModel;
    private DirectorTableModel directorTableModel;
    private GenreTableModel genreTableModel;
    private MovieTableModel movieTableModel;
    
    public MovieMaker(boolean isAdmin) {
        
        this.isAdmin = isAdmin;
        
        initComponents();
        
        if (!isAdmin) {
        tpMovieMaker.remove(jpAdminParser);
        }
        
        actorRepository = RepositoryFactory.getActorRepository();
        directorRepository = RepositoryFactory.getDirectorRepository();
        genreRepository = RepositoryFactory.getGenreRepository();
        movieRepository = RepositoryFactory.getMovieRepository();
        userRepository = RepositoryFactory.getUserRepository();
        
        initActorTable();
        initDirectorTable();
        initGenreTable();
        initMovieTable();
        
        initMovieListeners();
        initMovieLists();
        loadComboBoxes();

        clearActorFields();
        clearDirectorFields();
        clearGenreFields();
        clearMovieFields();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jProgressBar1 = new javax.swing.JProgressBar();
        jComboBox1 = new javax.swing.JComboBox<>();
        tpMovieMaker = new javax.swing.JTabbedPane();
        jpLogout = new javax.swing.JPanel();
        btnLogout = new javax.swing.JButton();
        jpMovies = new javax.swing.JPanel();
        lblTitleMovie = new javax.swing.JLabel();
        tfTitleMovie = new javax.swing.JTextField();
        lblDescriptionMovie = new javax.swing.JLabel();
        tfDescriptionMovie = new javax.swing.JTextField();
        lblLinkMovie = new javax.swing.JLabel();
        tfLinkMovie = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblMovie = new javax.swing.JTable();
        lblDateMovie = new javax.swing.JLabel();
        tfDateMovie = new javax.swing.JTextField();
        btnCreateMovie = new javax.swing.JButton();
        btnDeleteMovie = new javax.swing.JButton();
        btnUpdateMovie = new javax.swing.JButton();
        lblImagePathMovie = new javax.swing.JLabel();
        tfImagePathMovie = new javax.swing.JTextField();
        btnChooseImageMovie = new javax.swing.JButton();
        lblActorsMovie = new javax.swing.JLabel();
        lblDirectorsMovie = new javax.swing.JLabel();
        lblGenresMovie = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jlActorsMovie = new javax.swing.JList<>();
        jScrollPane6 = new javax.swing.JScrollPane();
        jlDirectorsMovie = new javax.swing.JList<>();
        jScrollPane7 = new javax.swing.JScrollPane();
        jlGenresMovie = new javax.swing.JList<>();
        lblPicture = new javax.swing.JLabel();
        cbActors = new javax.swing.JComboBox<>();
        cbDirectors = new javax.swing.JComboBox<>();
        cbGenres = new javax.swing.JComboBox<>();
        jpActors = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblActor = new javax.swing.JTable();
        btnCreateActor = new javax.swing.JButton();
        btnUpdateActor = new javax.swing.JButton();
        btnDeleteActor = new javax.swing.JButton();
        lblNameActor = new javax.swing.JLabel();
        tfNameActor = new javax.swing.JTextField();
        jpDirectors = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblDirector = new javax.swing.JTable();
        lblNameDirector = new javax.swing.JLabel();
        tfNameDirector = new javax.swing.JTextField();
        btnCreateDirector = new javax.swing.JButton();
        btnDeleteDirector = new javax.swing.JButton();
        btnUpdateDirector = new javax.swing.JButton();
        jpGenres = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblGenre = new javax.swing.JTable();
        btnCreateGenre = new javax.swing.JButton();
        btnDeleteGenre = new javax.swing.JButton();
        btnUpdateGenre = new javax.swing.JButton();
        lblNameGenre = new javax.swing.JLabel();
        tfNameGenre = new javax.swing.JTextField();
        jpAdminParser = new javax.swing.JPanel();
        btnParser = new javax.swing.JButton();
        btnCleanDB = new javax.swing.JButton();
        pbParser = new javax.swing.JProgressBar();

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tpMovieMaker.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tpMovieMakerMousePressed(evt);
            }
        });

        jpLogout.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jpLogoutMousePressed(evt);
            }
        });

        btnLogout.setText("LOGOUT");
        btnLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogoutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpLogoutLayout = new javax.swing.GroupLayout(jpLogout);
        jpLogout.setLayout(jpLogoutLayout);
        jpLogoutLayout.setHorizontalGroup(
            jpLogoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpLogoutLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnLogout, javax.swing.GroupLayout.DEFAULT_SIZE, 898, Short.MAX_VALUE)
                .addContainerGap())
        );
        jpLogoutLayout.setVerticalGroup(
            jpLogoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpLogoutLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnLogout, javax.swing.GroupLayout.DEFAULT_SIZE, 383, Short.MAX_VALUE)
                .addContainerGap())
        );

        tpMovieMaker.addTab("Logout", jpLogout);

        lblTitleMovie.setText("Title:");

        lblDescriptionMovie.setText("Description:");

        lblLinkMovie.setText("Link:");

        tblMovie.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Movie ID", "Title", "Description", "Link", "Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(tblMovie);

        lblDateMovie.setText("Date:");

        btnCreateMovie.setText("Create Movie");
        btnCreateMovie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateMovieActionPerformed(evt);
            }
        });

        btnDeleteMovie.setText("Delete Movie");
        btnDeleteMovie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteMovieActionPerformed(evt);
            }
        });

        btnUpdateMovie.setText("Update Movie");
        btnUpdateMovie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateMovieActionPerformed(evt);
            }
        });

        lblImagePathMovie.setText("Image Path:");

        btnChooseImageMovie.setText("Choose");
        btnChooseImageMovie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChooseImageMovieActionPerformed(evt);
            }
        });

        lblActorsMovie.setText("Actors:");

        lblDirectorsMovie.setText("Directors:");

        lblGenresMovie.setText("Genres:");

        jlActorsMovie.setModel(new DefaultListModel<Actor>());
        jScrollPane5.setViewportView(jlActorsMovie);

        jlDirectorsMovie.setModel(new DefaultListModel<Director>());
        jScrollPane6.setViewportView(jlDirectorsMovie);

        jlGenresMovie.setModel(new DefaultListModel<Genre>());
        jScrollPane7.setViewportView(jlGenresMovie);

        cbActors.setModel(new DefaultComboBoxModel<Actor>());
        cbActors.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbActorsActionPerformed(evt);
            }
        });

        cbDirectors.setModel(new DefaultComboBoxModel<Director>());

        cbGenres.setModel(new DefaultComboBoxModel<Genre>());

        javax.swing.GroupLayout jpMoviesLayout = new javax.swing.GroupLayout(jpMovies);
        jpMovies.setLayout(jpMoviesLayout);
        jpMoviesLayout.setHorizontalGroup(
            jpMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpMoviesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpMoviesLayout.createSequentialGroup()
                        .addGroup(jpMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(tfDescriptionMovie, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
                            .addComponent(lblTitleMovie, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblDescriptionMovie, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfTitleMovie))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jpMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblDateMovie, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfLinkMovie, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblLinkMovie, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfDateMovie, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jpMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jpMoviesLayout.createSequentialGroup()
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jpMoviesLayout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addComponent(lblActorsMovie, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(lblDirectorsMovie, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jpMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jpMoviesLayout.createSequentialGroup()
                                .addComponent(lblGenresMovie, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(22, 22, 22))
                            .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpMoviesLayout.createSequentialGroup()
                        .addComponent(btnCreateMovie, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnUpdateMovie, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jpMoviesLayout.createSequentialGroup()
                        .addComponent(cbActors, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbDirectors, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cbGenres, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(221, 221, 221)))
                .addGap(25, 25, 25)
                .addGroup(jpMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpMoviesLayout.createSequentialGroup()
                        .addComponent(lblPicture, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jpMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblImagePathMovie, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfImagePathMovie, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnChooseImageMovie, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpMoviesLayout.createSequentialGroup()
                        .addComponent(btnDeleteMovie, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
            .addComponent(jScrollPane4)
        );
        jpMoviesLayout.setVerticalGroup(
            jpMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpMoviesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jpMoviesLayout.createSequentialGroup()
                        .addGroup(jpMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblTitleMovie)
                            .addComponent(lblLinkMovie)
                            .addComponent(lblActorsMovie)
                            .addComponent(lblDirectorsMovie)
                            .addComponent(lblGenresMovie, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jpMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jpMoviesLayout.createSequentialGroup()
                                .addGroup(jpMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jpMoviesLayout.createSequentialGroup()
                                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                        .addGap(56, 56, 56))
                                    .addGroup(jpMoviesLayout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(btnChooseImageMovie)
                                        .addGap(48, 48, 48))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jpMoviesLayout.createSequentialGroup()
                                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGroup(jpMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btnUpdateMovie)
                                    .addComponent(btnDeleteMovie))
                                .addGap(6, 6, 6))
                            .addGroup(jpMoviesLayout.createSequentialGroup()
                                .addGroup(jpMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jpMoviesLayout.createSequentialGroup()
                                        .addGroup(jpMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(tfTitleMovie, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(tfLinkMovie, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(22, 22, 22)
                                        .addGroup(jpMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(lblDescriptionMovie)
                                            .addComponent(lblDateMovie))
                                        .addGap(18, 18, 18)
                                        .addGroup(jpMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(tfDescriptionMovie, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(tfDateMovie, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(jpMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(cbActors, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(cbDirectors, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(cbGenres, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(btnCreateMovie)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(jpMoviesLayout.createSequentialGroup()
                        .addComponent(lblImagePathMovie)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfImagePathMovie, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28))
                    .addGroup(jpMoviesLayout.createSequentialGroup()
                        .addComponent(lblPicture, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(51, 51, 51)))
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tpMovieMaker.addTab("Movies", jpMovies);

        tblActor.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "ID", "Name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblActor);

        btnCreateActor.setText("Create Actor");
        btnCreateActor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActorActionPerformed(evt);
            }
        });

        btnUpdateActor.setText("Update Actor");
        btnUpdateActor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActorActionPerformed(evt);
            }
        });

        btnDeleteActor.setText("Delete Actor");
        btnDeleteActor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActorActionPerformed(evt);
            }
        });

        lblNameActor.setText("Name:");

        javax.swing.GroupLayout jpActorsLayout = new javax.swing.GroupLayout(jpActors);
        jpActors.setLayout(jpActorsLayout);
        jpActorsLayout.setHorizontalGroup(
            jpActorsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpActorsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpActorsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpActorsLayout.createSequentialGroup()
                        .addGroup(jpActorsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(jpActorsLayout.createSequentialGroup()
                                .addComponent(btnCreateActor, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(99, 99, 99)
                                .addComponent(btnUpdateActor, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 409, Short.MAX_VALUE)
                                .addComponent(btnDeleteActor, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpActorsLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(lblNameActor, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(198, 198, 198))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpActorsLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(tfNameActor, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(144, 144, 144))
        );
        jpActorsLayout.setVerticalGroup(
            jpActorsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpActorsLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblNameActor)
                .addGap(18, 18, 18)
                .addComponent(tfNameActor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42)
                .addGroup(jpActorsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCreateActor)
                    .addComponent(btnUpdateActor)
                    .addComponent(btnDeleteActor))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        tpMovieMaker.addTab("Actors", jpActors);

        tblDirector.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "ID", "Name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblDirector);

        lblNameDirector.setText("Name:");

        btnCreateDirector.setText("Create Director");
        btnCreateDirector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateDirectorActionPerformed(evt);
            }
        });

        btnDeleteDirector.setText("Delete Director");
        btnDeleteDirector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteDirectorActionPerformed(evt);
            }
        });

        btnUpdateDirector.setText("Update Director");
        btnUpdateDirector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateDirectorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpDirectorsLayout = new javax.swing.GroupLayout(jpDirectors);
        jpDirectors.setLayout(jpDirectorsLayout);
        jpDirectorsLayout.setHorizontalGroup(
            jpDirectorsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpDirectorsLayout.createSequentialGroup()
                .addGroup(jpDirectorsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpDirectorsLayout.createSequentialGroup()
                        .addGroup(jpDirectorsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jpDirectorsLayout.createSequentialGroup()
                                .addGap(276, 276, 276)
                                .addComponent(lblNameDirector, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jpDirectorsLayout.createSequentialGroup()
                                .addGap(145, 145, 145)
                                .addComponent(tfNameDirector, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jpDirectorsLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jpDirectorsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 898, Short.MAX_VALUE)
                            .addGroup(jpDirectorsLayout.createSequentialGroup()
                                .addComponent(btnCreateDirector, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(95, 95, 95)
                                .addComponent(btnUpdateDirector, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnDeleteDirector, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        jpDirectorsLayout.setVerticalGroup(
            jpDirectorsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpDirectorsLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(lblNameDirector, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(tfNameDirector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 73, Short.MAX_VALUE)
                .addGroup(jpDirectorsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCreateDirector)
                    .addComponent(btnDeleteDirector)
                    .addComponent(btnUpdateDirector))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        tpMovieMaker.addTab("Directors", jpDirectors);

        tblGenre.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "ID", "Name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tblGenre);

        btnCreateGenre.setText("Create Genre");
        btnCreateGenre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateGenreActionPerformed(evt);
            }
        });

        btnDeleteGenre.setText("Delete Genre");
        btnDeleteGenre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteGenreActionPerformed(evt);
            }
        });

        btnUpdateGenre.setText("Update Genre");
        btnUpdateGenre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateGenreActionPerformed(evt);
            }
        });

        lblNameGenre.setText("Name:");

        javax.swing.GroupLayout jpGenresLayout = new javax.swing.GroupLayout(jpGenres);
        jpGenres.setLayout(jpGenresLayout);
        jpGenresLayout.setHorizontalGroup(
            jpGenresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpGenresLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpGenresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpGenresLayout.createSequentialGroup()
                        .addGroup(jpGenresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 898, Short.MAX_VALUE)
                            .addGroup(jpGenresLayout.createSequentialGroup()
                                .addComponent(btnCreateGenre, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnUpdateGenre, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(98, 98, 98)
                                .addComponent(btnDeleteGenre, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpGenresLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(lblNameGenre, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(271, 271, 271))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpGenresLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(tfNameGenre, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(147, 147, 147))
        );
        jpGenresLayout.setVerticalGroup(
            jpGenresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpGenresLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(lblNameGenre)
                .addGap(18, 18, 18)
                .addComponent(tfNameGenre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 75, Short.MAX_VALUE)
                .addGroup(jpGenresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCreateGenre)
                    .addComponent(btnDeleteGenre)
                    .addComponent(btnUpdateGenre))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        tpMovieMaker.addTab("Genres", jpGenres);

        btnParser.setText("RS6 Parser ");
        btnParser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnParserActionPerformed(evt);
            }
        });

        btnCleanDB.setText("Clean Slate ");
        btnCleanDB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCleanDBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpAdminParserLayout = new javax.swing.GroupLayout(jpAdminParser);
        jpAdminParser.setLayout(jpAdminParserLayout);
        jpAdminParserLayout.setHorizontalGroup(
            jpAdminParserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpAdminParserLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnParser, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pbParser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnCleanDB, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jpAdminParserLayout.setVerticalGroup(
            jpAdminParserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpAdminParserLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpAdminParserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnCleanDB, javax.swing.GroupLayout.DEFAULT_SIZE, 383, Short.MAX_VALUE)
                    .addComponent(btnParser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(jpAdminParserLayout.createSequentialGroup()
                .addGap(166, 166, 166)
                .addComponent(pbParser, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tpMovieMaker.addTab("Admin Parser", jpAdminParser);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tpMovieMaker)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tpMovieMaker, javax.swing.GroupLayout.PREFERRED_SIZE, 430, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCreateMovieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateMovieActionPerformed
         
          try {
                    Movie movie = createMovieWithVariables();
                    movieRepository.createMovie(movie);
                    movieTableModel.addMovie(createMovieWithVariables());
                    clearMovieFields();
                    JOptionPane.showMessageDialog(this, "Film added successfully.");
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(this, "Error adding film.", "Error", JOptionPane.ERROR_MESSAGE);
                    ex.printStackTrace();
                }
        
    }//GEN-LAST:event_btnCreateMovieActionPerformed

    private void btnUpdateMovieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateMovieActionPerformed
      
        try {
                    int selectedRow = tblMovie.getSelectedRow();
                    if (selectedRow >= 0) {
                        Movie movie = movieTableModel.getMovieAt(selectedRow);
                        updateMovieWithVariables(movie);
                        movieRepository.updateMovie(movie.getId(), movie);
                    }
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(this, "Error updating film.", "Error", JOptionPane.ERROR_MESSAGE);
                    ex.printStackTrace();
                }
        
    }//GEN-LAST:event_btnUpdateMovieActionPerformed

    private void btnDeleteMovieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteMovieActionPerformed
       
        try {
                    int selectedRow = tblMovie.getSelectedRow();
                    if (selectedRow >= 0) {
                        Movie movie = movieTableModel.getMovieAt(selectedRow);
                        movieRepository.deleteMovie(movie.getId());
                        movieTableModel.removeMovie(selectedRow);
                        clearMovieFields();
                        JOptionPane.showMessageDialog(this, "Film deleted successfully.");
                    }
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(this, "Error deleting film.", "Error", JOptionPane.ERROR_MESSAGE);
                    ex.printStackTrace();
                }
        
    }//GEN-LAST:event_btnDeleteMovieActionPerformed

    private void btnCreateActorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActorActionPerformed
        
        try {
                Actor actor = new Actor(tfNameActor.getText().trim());
                actorRepository.create(actor);
                System.out.println(actor);
                actorTableModel.addActor(actor);
                clearActorFields();
                JOptionPane.showMessageDialog(this, "Actor added successfully.");
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Error adding actor.", "Error", JOptionPane.ERROR_MESSAGE);
                ex.printStackTrace();
            }
        
    }//GEN-LAST:event_btnCreateActorActionPerformed

    private void btnUpdateActorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActorActionPerformed

        try {
                int selectedRow = tblActor.getSelectedRow();
                if (selectedRow >= 0) {
                    Actor actor = actorTableModel.getActorAt(selectedRow);
                    actor.setName(tfNameActor.getText().trim());
                    actorRepository.update(actor.getId(), actor);
                    actor.setName(tfNameActor.getText().trim());
                    actorTableModel.updateActor(selectedRow, actor);
                    clearActorFields();
                    JOptionPane.showMessageDialog(this, "Actor updated successfully.");
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Error updating actor.", "Error", JOptionPane.ERROR_MESSAGE);
                ex.printStackTrace();
            }
        
    }//GEN-LAST:event_btnUpdateActorActionPerformed

    private void btnDeleteActorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActorActionPerformed
        
         try {
                int selectedRow = tblActor.getSelectedRow();
                if (selectedRow >= 0) {
                    Actor actor = actorTableModel.getActorAt(selectedRow);
                    actorRepository.delete(actor.getId());
                    actorTableModel.removeActor(selectedRow);
                    clearActorFields();
                    JOptionPane.showMessageDialog(this, "Actor deleted successfully.");
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Error deleting actor.", "Error", JOptionPane.ERROR_MESSAGE);
                ex.printStackTrace();
            }
        
    }//GEN-LAST:event_btnDeleteActorActionPerformed

    private void btnCreateDirectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateDirectorActionPerformed

                try {
                    Director director = new Director(tfNameDirector.getText().trim());
                    directorRepository.create(director);
                    directorTableModel.addDirector(director);
                    clearDirectorFields();
                    JOptionPane.showMessageDialog(this, "Director added successfully.");
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(this, "Error adding director.", "Error", JOptionPane.ERROR_MESSAGE);
                    ex.printStackTrace();
                }
        
    }//GEN-LAST:event_btnCreateDirectorActionPerformed

    private void btnUpdateDirectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateDirectorActionPerformed

        try {
                    int selectedRow = tblDirector.getSelectedRow();
                    if (selectedRow >= 0) {
                        Director director = directorTableModel.getDirectorAt(selectedRow);
                        director.setName(tfNameDirector.getText().trim());
                        directorRepository.update(director.getId(), director);
                        director.setName(tfNameDirector.getText().trim());
                        directorTableModel.updateDirector(selectedRow, director);
                        clearDirectorFields();
                        JOptionPane.showMessageDialog(this, "Director updated successfully.");
                    }
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(this, "Error updating director.", "Error", JOptionPane.ERROR_MESSAGE);
                    ex.printStackTrace();
                }
        
    }//GEN-LAST:event_btnUpdateDirectorActionPerformed

    private void btnDeleteDirectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteDirectorActionPerformed

        try {
                    int selectedRow = tblDirector.getSelectedRow();
                    if (selectedRow >= 0) {
                        Director director = directorTableModel.getDirectorAt(selectedRow);
                        directorRepository.delete(director.getId());
                        directorTableModel.removeDirector(selectedRow);
                        clearDirectorFields();
                        JOptionPane.showMessageDialog(this, "Director deleted successfully.");
                    }
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(this, "Error deleting director.", "Error", JOptionPane.ERROR_MESSAGE);
                    ex.printStackTrace();
                }
        
    }//GEN-LAST:event_btnDeleteDirectorActionPerformed

    private void btnCreateGenreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateGenreActionPerformed

        try {
                    Genre genre = new Genre(tfNameGenre.getText().trim());
                    genreRepository.create(genre);
                    genreTableModel.addGenre(genre);
                    clearGenreFields();
                    JOptionPane.showMessageDialog(this, "Genre added successfully.");
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(this, "Error adding genre.", "Error", JOptionPane.ERROR_MESSAGE);
                    ex.printStackTrace();
                }
        
    }//GEN-LAST:event_btnCreateGenreActionPerformed

    private void btnUpdateGenreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateGenreActionPerformed

         try {
                    int selectedRow = tblGenre.getSelectedRow();
                    if (selectedRow >= 0) {
                        Genre genre = genreTableModel.getGenreAt(selectedRow);
                        genre.setName(tfNameGenre.getText().trim());
                        genreRepository.update(genre.getId(), genre);
                        genre.setName(tfNameGenre.getText().trim());
                        genreTableModel.updateGenre(selectedRow, genre);
                        clearGenreFields();
                        JOptionPane.showMessageDialog(this, "Genre updated successfully.");
                    }
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(this, "Error updating genre.", "Error", JOptionPane.ERROR_MESSAGE);
                    ex.printStackTrace();
                }
        
    }//GEN-LAST:event_btnUpdateGenreActionPerformed

    private void btnDeleteGenreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteGenreActionPerformed

         try {
                    int selectedRow = tblGenre.getSelectedRow();
                    if (selectedRow >= 0) {
                        Genre genre = genreTableModel.getGenreAt(selectedRow);
                        genreRepository.delete(genre.getId());
                        genreTableModel.removeGenre(selectedRow);
                        clearGenreFields();
                        JOptionPane.showMessageDialog(this, "Genre deleted successfully.");
                    }
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(this, "Error deleting genre.", "Error", JOptionPane.ERROR_MESSAGE);
                    ex.printStackTrace();
                }
        
    }//GEN-LAST:event_btnDeleteGenreActionPerformed

    private void btnParserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnParserActionPerformed

        new SwingWorker<Void, Void>() {

        @Override
        protected Void doInBackground() throws Exception {
            pbParser.setIndeterminate(false); 
            pbParser.setValue(0); 

            Timer timer = new Timer(100, null); 
            timer.addActionListener(new ActionListener() {
                private int progress = 0;

                @Override
                public void actionPerformed(ActionEvent e) {
                    progress++;
                    pbParser.setValue(progress);
                    if (progress >= 100) {
                        timer.stop();
                    }
                }
            });

            timer.start(); 

            try {
                HttpURLConnection connection = UrlConnectionFactory.getHttpUrlConnection("https://www.blitz-cinestar-bh.ba/rss.aspx?id=2682");
                try (InputStream inputStream = connection.getInputStream()) {
                    Parser rssParser = new Parser(movieRepository, actorRepository, directorRepository, genreRepository);
                    rssParser.parseAndSave(inputStream); 
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Failed to load RSS data: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                throw ex; 
            }

            return null;
        }

        @Override
        protected void done() {
            try {
                get(); 
                pbParser.setValue(100); 
                JOptionPane.showMessageDialog(null, "RSS data has been successfully loaded.", "Success", JOptionPane.INFORMATION_MESSAGE);
                refresh();
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Failed to load RSS data: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }.execute();
        
    }//GEN-LAST:event_btnParserActionPerformed

    private void btnCleanDBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCleanDBActionPerformed

        pbParser.setValue(0);
        
        try {
                userRepository.cleanDatabase(); 
                JOptionPane.showMessageDialog(this, "All data has been successfully deleted.");
                refresh();
                
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Error occurred while deleting data: " + ex.getMessage(), 
                        "Error", JOptionPane.ERROR_MESSAGE);
            }

    }//GEN-LAST:event_btnCleanDBActionPerformed

    private void tpMovieMakerMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tpMovieMakerMousePressed
        
    }//GEN-LAST:event_tpMovieMakerMousePressed

    private void jpLogoutMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jpLogoutMousePressed


    }//GEN-LAST:event_jpLogoutMousePressed

    private void btnLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogoutActionPerformed

        this.dispose();
                new Login().setVisible(true);    }//GEN-LAST:event_btnLogoutActionPerformed

    private void btnChooseImageMovieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChooseImageMovieActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Image Files", "jpg", "jpeg", "png", "gif", "bmp");
    fileChooser.setFileFilter(filter);
    
    int returnValue = fileChooser.showOpenDialog(this);
    if (returnValue == JFileChooser.APPROVE_OPTION) {
        File selectedFile = fileChooser.getSelectedFile();
        tfImagePathMovie.setText(selectedFile.getAbsolutePath());
        
        try {
            ImageIcon icon = IconUtils.createIcon(selectedFile, lblPicture.getWidth(), lblPicture.getHeight());
            lblPicture.setIcon(icon);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Failed to load image: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
    }
    }//GEN-LAST:event_btnChooseImageMovieActionPerformed

    private void cbActorsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbActorsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbActorsActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MovieMaker.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MovieMaker.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MovieMaker.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MovieMaker.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MovieMaker(false).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnChooseImageMovie;
    private javax.swing.JButton btnCleanDB;
    private javax.swing.JButton btnCreateActor;
    private javax.swing.JButton btnCreateDirector;
    private javax.swing.JButton btnCreateGenre;
    private javax.swing.JButton btnCreateMovie;
    private javax.swing.JButton btnDeleteActor;
    private javax.swing.JButton btnDeleteDirector;
    private javax.swing.JButton btnDeleteGenre;
    private javax.swing.JButton btnDeleteMovie;
    private javax.swing.JButton btnLogout;
    private javax.swing.JButton btnParser;
    private javax.swing.JButton btnUpdateActor;
    private javax.swing.JButton btnUpdateDirector;
    private javax.swing.JButton btnUpdateGenre;
    private javax.swing.JButton btnUpdateMovie;
    private javax.swing.JComboBox<Actor> cbActors;
    private javax.swing.JComboBox<Director> cbDirectors;
    private javax.swing.JComboBox<Genre> cbGenres;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JList<Actor> jlActorsMovie;
    private javax.swing.JList<Director> jlDirectorsMovie;
    private javax.swing.JList<Genre> jlGenresMovie;
    private javax.swing.JPanel jpActors;
    private javax.swing.JPanel jpAdminParser;
    private javax.swing.JPanel jpDirectors;
    private javax.swing.JPanel jpGenres;
    private javax.swing.JPanel jpLogout;
    private javax.swing.JPanel jpMovies;
    private javax.swing.JLabel lblActorsMovie;
    private javax.swing.JLabel lblDateMovie;
    private javax.swing.JLabel lblDescriptionMovie;
    private javax.swing.JLabel lblDirectorsMovie;
    private javax.swing.JLabel lblGenresMovie;
    private javax.swing.JLabel lblImagePathMovie;
    private javax.swing.JLabel lblLinkMovie;
    private javax.swing.JLabel lblNameActor;
    private javax.swing.JLabel lblNameDirector;
    private javax.swing.JLabel lblNameGenre;
    private javax.swing.JLabel lblPicture;
    private javax.swing.JLabel lblTitleMovie;
    private javax.swing.JProgressBar pbParser;
    private javax.swing.JTable tblActor;
    private javax.swing.JTable tblDirector;
    private javax.swing.JTable tblGenre;
    private javax.swing.JTable tblMovie;
    private javax.swing.JTextField tfDateMovie;
    private javax.swing.JTextField tfDescriptionMovie;
    private javax.swing.JTextField tfImagePathMovie;
    private javax.swing.JTextField tfLinkMovie;
    private javax.swing.JTextField tfNameActor;
    private javax.swing.JTextField tfNameDirector;
    private javax.swing.JTextField tfNameGenre;
    private javax.swing.JTextField tfTitleMovie;
    private javax.swing.JTabbedPane tpMovieMaker;
    // End of variables declaration//GEN-END:variables

    private void initActorTable() {
        try {
            List<Actor> actors = actorRepository.selectAll();
            actorTableModel = new ActorTableModel(actors);
            tblActor.setModel(actorTableModel);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error loading actors.", "Error", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
    }

    private void clearActorFields() {
        tfNameActor.setText("");
        tblActor.clearSelection();
    }

    private void initDirectorTable() {
        try {
            List<Director> directors = directorRepository.selectAll();
            directorTableModel = new DirectorTableModel(directors);
            tblDirector.setModel(directorTableModel);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error loading directors.", "Error", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
    }

    private void clearDirectorFields() {
        tfNameDirector.setText("");
        tblDirector.clearSelection();   
    }

    private void initGenreTable() {
        try {
            List<Genre> genres = genreRepository.selectAll();
            genreTableModel = new GenreTableModel(genres);
            tblGenre.setModel(genreTableModel);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error loading genres.", "Error", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
    }

    private void clearGenreFields() {
        tfNameGenre.setText("");
        tblGenre.clearSelection();      
    }

    private void clearMovieFields() {
        tfTitleMovie.setText("");
        tfDateMovie.setText("");
        tfLinkMovie.setText("");
        tfImagePathMovie.setText("");
        tfDescriptionMovie.setText("");
        tblMovie.clearSelection();
        clearMovieLists();    }

    private void initMovieTable() {
        try {
            List<Movie> movies = movieRepository.selectMovies();
            movieTableModel = new MovieTableModel(movies);
            tblMovie.setModel(movieTableModel);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error loading films.", "Error", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
    }

    private void initMovieListeners() {
        tblMovie.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (!e.getValueIsAdjusting() && tblMovie.getSelectedRow() != -1) {
                    fillFields();
                }
            }
        });
        cbActors.addActionListener(evt -> addActorToList());
        cbDirectors.addActionListener(evt -> addDirectorToList());
        cbGenres.addActionListener(evt -> addGenreToList());
    }

    private void initMovieLists() {
        DefaultListModel<Actor> actorListModel = new DefaultListModel<>();
        DefaultListModel<Director> directorListModel = new DefaultListModel<>();
        DefaultListModel<Genre> genreListModel = new DefaultListModel<>();

        jlActorsMovie.setModel(actorListModel);
        jlDirectorsMovie.setModel(directorListModel);
        jlGenresMovie.setModel(genreListModel);
}

    private void loadComboBoxes() {
        try {
            List<Actor> actors = actorRepository.selectAll();
            List<Director> directors = directorRepository.selectAll();
            List<Genre> genres = genreRepository.selectAll();

            cbDirectors.setModel(new DefaultComboBoxModel<>(directors.toArray(new Director[0])));
            cbActors.setModel(new DefaultComboBoxModel<>(actors.toArray(new Actor[0])));
            cbGenres.setModel(new DefaultComboBoxModel<>(genres.toArray(new Genre[0])));

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error loading data.", "Error", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
    }

    private void addActorToList() {
        Actor selectedActor = (Actor) cbActors.getSelectedItem();
        if (selectedActor != null) {
            DefaultListModel<Actor> model = (DefaultListModel<Actor>) jlActorsMovie.getModel();
            if (!model.contains(selectedActor)) {
                model.addElement(selectedActor);
            }
        }
    }

    private void addDirectorToList() {
        Director selectedDirector = (Director) cbDirectors.getSelectedItem();
        if (selectedDirector != null) {
            DefaultListModel<Director> model = (DefaultListModel<Director>) jlDirectorsMovie.getModel();
            if (!model.contains(selectedDirector)) {
                model.addElement(selectedDirector);
            }
        }
    }

    private void addGenreToList() {
        Genre selectedGenre = (Genre) cbGenres.getSelectedItem();
        if (selectedGenre != null) {
            DefaultListModel<Genre> model = (DefaultListModel<Genre>) jlGenresMovie.getModel();
            if (!model.contains(selectedGenre)) {
                model.addElement(selectedGenre);
            }
        }
    }

    private void clearMovieLists() {
        ((DefaultListModel<Actor>) jlActorsMovie.getModel()).clear();
        ((DefaultListModel<Director>) jlDirectorsMovie.getModel()).clear();
        ((DefaultListModel<Genre>) jlGenresMovie.getModel()).clear();
    }

    private Movie createMovieWithVariables() {
        String title = tfTitleMovie.getText().trim();
        String description = tfDescriptionMovie.getText().trim();
        LocalDateTime publishedDate = LocalDateTime.parse(tfDateMovie.getText().trim(), Movie.DATE_FORMATTER);
        String picturePath = tfImagePathMovie.getText().trim();
        String link = tfLinkMovie.getText().trim();

        Movie movie = new Movie(title, description, publishedDate, picturePath, link);

        DefaultListModel<Actor> actorModel = (DefaultListModel<Actor>) jlActorsMovie.getModel();
        for (int i = 0; i < actorModel.getSize(); i++) {
            movie.getActorIds().add(actorModel.getElementAt(i).getId());
        }

        DefaultListModel<Director> directorModel = (DefaultListModel<Director>) jlDirectorsMovie.getModel();
        for (int i = 0; i < directorModel.getSize(); i++) {
            movie.getDirectorIds().add(directorModel.getElementAt(i).getId());
        }

        DefaultListModel<Genre> genreModel = (DefaultListModel<Genre>) jlGenresMovie.getModel();
        for (int i = 0; i < genreModel.getSize(); i++) {
            movie.getGenreIds().add(genreModel.getElementAt(i).getId());
        }

        return movie;
    }

    private void updateMovieWithVariables(Movie movie) {
        movie.setTitle(tfTitleMovie.getText().trim());
        movie.setDescription(tfDescriptionMovie.getText().trim());
        movie.setPublishedDate(LocalDateTime.parse(tfDateMovie.getText().trim(), Movie.DATE_FORMATTER));
        movie.setPicturePath(tfImagePathMovie.getText().trim());
        movie.setLink(tfLinkMovie.getText().trim());

        movie.getActorIds().clear();
        DefaultListModel<Actor> actorModel = (DefaultListModel<Actor>) jlActorsMovie.getModel();
        for (int i = 0; i < actorModel.getSize(); i++) {
            movie.getActorIds().add(actorModel.getElementAt(i).getId());
        }

        movie.getDirectorIds().clear();
        DefaultListModel<Director> directorModel = (DefaultListModel<Director>) jlDirectorsMovie.getModel();
        for (int i = 0; i < directorModel.getSize(); i++) {
            movie.getDirectorIds().add(directorModel.getElementAt(i).getId());
        }

        movie.getGenreIds().clear();
        DefaultListModel<Genre> genreModel = (DefaultListModel<Genre>) jlGenresMovie.getModel();
        for (int i = 0; i < genreModel.getSize(); i++) {
            movie.getGenreIds().add(genreModel.getElementAt(i).getId());
        }
    }

    public void refresh(){
        try{
        List<Actor> actors=actorRepository.selectAll();
        List<Director> directors=directorRepository.selectAll();
        List<Genre> genres=genreRepository.selectAll();
        List<Movie> movies=movieRepository.selectMovies();
        
        cbDirectors.setModel(new DefaultComboBoxModel<>(directors.toArray(new Director[0])));
        cbActors.setModel(new DefaultComboBoxModel<>(actors.toArray(new Actor[0])));
        cbGenres.setModel(new DefaultComboBoxModel<>(genres.toArray(new Genre[0])));
        
        actorTableModel.setActors(actors);
        directorTableModel.setDirectors(directors);
        genreTableModel.setGenres(genres);
        movieTableModel.setMovies(movies);
        
        clearActorFields();
        clearDirectorFields();
        clearGenreFields();
        clearMovieFields();
        }
    catch(Exception ex){
            JOptionPane.showMessageDialog(this, "Error refreshing data.", "Error", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
            }
            
        }
    
        private void fillFields(){
            int selectedRow = tblMovie.getSelectedRow();
    if (selectedRow >= 0) {
        SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {
            private Movie movie;
            private List<Actor> actors;
            private List<Director> directors;
            private List<Genre> genres;

            @Override
            protected Void doInBackground() throws Exception {
                movie = movieTableModel.getMovieAt(selectedRow);
                actors = findActorsByIds(movie.getActorIds());
                directors = findDirectorsByIds(movie.getDirectorIds());
                genres = findGenresByIds(movie.getGenreIds());
                return null;
            }

            @Override
            protected void done() {
                try {
                    tfTitleMovie.setText(movie.getTitle());
                    tfDateMovie.setText(movie.getPublishedDate().format(Movie.DATE_FORMATTER));
                    tfLinkMovie.setText(movie.getLink());
                    tfImagePathMovie.setText(movie.getPicturePath());
                    tfDescriptionMovie.setText(movie.getDescription());

                    clearMovieLists();

                    DefaultListModel<Actor> actorModel = (DefaultListModel<Actor>) jlActorsMovie.getModel();
                    for (Actor actor : actors) {
                        actorModel.addElement(actor);
                    }

                    DefaultListModel<Director> directorModel = (DefaultListModel<Director>) jlDirectorsMovie.getModel();
                    for (Director director : directors) {
                        directorModel.addElement(director);
                    }

                    DefaultListModel<Genre> genreModel = (DefaultListModel<Genre>) jlGenresMovie.getModel();
                    for (Genre genre : genres) {
                        genreModel.addElement(genre);
                    }

                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(MovieMaker.this, "Error populating fields.", "Error", JOptionPane.ERROR_MESSAGE);
                    ex.printStackTrace();
                }
            }
        };

        worker.execute();
    }
        }

    private List<Actor> findActorsByIds(List<Integer> actorIds) throws Exception{
        
        List<Actor> actors = new ArrayList<>();
        for (Integer actorId : actorIds) {
            actorRepository.select(actorId).ifPresent(actors::add);
        }
        return actors;
        
    }

    private List<Director> findDirectorsByIds(List<Integer> directorIds) throws Exception{
        
        List<Director> directors = new ArrayList<>();
        for (Integer directorId : directorIds) {
            directorRepository.select(directorId).ifPresent(directors::add);
        }
        return directors;
        
    }

    private List<Genre> findGenresByIds(List<Integer> genreIds) throws Exception{
        
        List<Genre> genres = new ArrayList<>();
        for (Integer genreId : genreIds) {
            genreRepository.select(genreId).ifPresent(genres::add);
        }
        return genres;
        
    }
}

